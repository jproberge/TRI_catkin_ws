// Generated by gencpp from file ur_msgs/GripperMoveRequest.msg
// DO NOT EDIT!


#ifndef UR_MSGS_MESSAGE_GRIPPERMOVEREQUEST_H
#define UR_MSGS_MESSAGE_GRIPPERMOVEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ur_msgs
{
template <class ContainerAllocator>
struct GripperMoveRequest_
{
  typedef GripperMoveRequest_<ContainerAllocator> Type;

  GripperMoveRequest_()
    : pos(0)
    , force(0)
    , speed(0)
    , position_compensation(false)  {
    }
  GripperMoveRequest_(const ContainerAllocator& _alloc)
    : pos(0)
    , force(0)
    , speed(0)
    , position_compensation(false)  {
  (void)_alloc;
    }



   typedef uint8_t _pos_type;
  _pos_type pos;

   typedef uint8_t _force_type;
  _force_type force;

   typedef uint8_t _speed_type;
  _speed_type speed;

   typedef uint8_t _position_compensation_type;
  _position_compensation_type position_compensation;





  typedef boost::shared_ptr< ::ur_msgs::GripperMoveRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ur_msgs::GripperMoveRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GripperMoveRequest_

typedef ::ur_msgs::GripperMoveRequest_<std::allocator<void> > GripperMoveRequest;

typedef boost::shared_ptr< ::ur_msgs::GripperMoveRequest > GripperMoveRequestPtr;
typedef boost::shared_ptr< ::ur_msgs::GripperMoveRequest const> GripperMoveRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ur_msgs::GripperMoveRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ur_msgs::GripperMoveRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ur_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'ur_msgs': ['/home/bdml/catkin_ws/src/universal_robot/ur_msgs/msg', '/home/bdml/catkin_ws/devel/share/ur_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ur_msgs::GripperMoveRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ur_msgs::GripperMoveRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ur_msgs::GripperMoveRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ur_msgs::GripperMoveRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ur_msgs::GripperMoveRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ur_msgs::GripperMoveRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ur_msgs::GripperMoveRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8e1410c2dff620c967ae982f954af617";
  }

  static const char* value(const ::ur_msgs::GripperMoveRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8e1410c2dff620c9ULL;
  static const uint64_t static_value2 = 0x67ae982f954af617ULL;
};

template<class ContainerAllocator>
struct DataType< ::ur_msgs::GripperMoveRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ur_msgs/GripperMoveRequest";
  }

  static const char* value(const ::ur_msgs::GripperMoveRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ur_msgs::GripperMoveRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 pos\n\
uint8 force\n\
uint8 speed\n\
bool position_compensation\n\
";
  }

  static const char* value(const ::ur_msgs::GripperMoveRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ur_msgs::GripperMoveRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pos);
      stream.next(m.force);
      stream.next(m.speed);
      stream.next(m.position_compensation);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GripperMoveRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ur_msgs::GripperMoveRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ur_msgs::GripperMoveRequest_<ContainerAllocator>& v)
  {
    s << indent << "pos: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.pos);
    s << indent << "force: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.force);
    s << indent << "speed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.speed);
    s << indent << "position_compensation: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.position_compensation);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UR_MSGS_MESSAGE_GRIPPERMOVEREQUEST_H
